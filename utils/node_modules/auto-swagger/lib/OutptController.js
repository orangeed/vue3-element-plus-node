"use strict";
/** @format */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputController = exports.OutputControllerInsert = void 0;
var lodash_1 = require("lodash");
var chalk_1 = __importDefault(require("chalk"));
var OutputControllerInsert = /** @class */ (function () {
    function OutputControllerInsert() {
    }
    OutputControllerInsert.prototype.writeParaTypesString = function (parameters) {
        return lodash_1.map(lodash_1.chain(parameters)
            .filter(function (item) { return !item.name.includes('.'); })
            .sortBy(function (item) { return Number(!item.required); })
            .value(), function (e) { return "" + e.name + (e.required ? '' : '?'); }).join(',');
    };
    OutputControllerInsert.prototype.writeParaString = function (parameters) {
        return lodash_1.map(lodash_1.chain(parameters)
            .filter(function (item) { return !item.name.includes('.'); })
            .sortBy(function (item) { return Number(!item.required); })
            .value(), function (e) { return e.name; }).join(',');
    };
    OutputControllerInsert.prototype.writeFnDoc = function (summary, description, method, url) {
        var template = [
            { key: summary, name: '接口简介' },
            { key: description, name: '接口备注' },
            { key: method, name: '接口类型' },
            { key: url.replace(/\$/g, ''), name: '接口地址' }
        ];
        return lodash_1.map(template, function (e) { return "   *  " + e.name + " " + e.key; }).join('\n');
    };
    OutputControllerInsert.prototype.writeFnParameters = function (parameters) {
        return lodash_1.chain(parameters)
            .filter(function (item) { return !item.name.includes('.'); })
            .sortBy(function (item) { return Number(!item.required); })
            .value();
    };
    OutputControllerInsert.prototype.writeParasDoc = function (parameters) {
        return lodash_1.map(parameters, function (paraItem) { return "   *  @param " + paraItem.name + " " + paraItem.description; }).join('\n');
    };
    /**
     * 替换中模板字符串中的子函数内容
     * @param childFunTemplate
     * @param writeFnDoc
     * @param writeParasDoc
     * @param functionName
     * @param url
     * @param method
     * @param writeFnParameters
     * @param writeParaString
     * @param writeParaTypesString
     * @param centerName
     * @param renderMethod
     */
    OutputControllerInsert.prototype.replaceChildFn = function (_a) {
        var childFunTemplate = _a.childFunTemplate, writeFnDoc = _a.writeFnDoc, writeParasDoc = _a.writeParasDoc, functionName = _a.functionName, url = _a.url, method = _a.method, writeFnParameters = _a.writeFnParameters, writeParaString = _a.writeParaString, writeParaTypesString = _a.writeParaTypesString, centerName = _a.centerName, renderMethod = _a.renderMethod;
        console.log(chalk_1.default.green(url));
        return childFunTemplate
            .replace('</childInfo/>', writeFnDoc)
            .replace('</childParams/>', writeParasDoc)
            .replace('</childFunName/>', functionName)
            .replace('</childrenUrl/>', function () {
            var _url = url.replace(/\/v1\//g, '').replace(/\/v2\//, ''); // todo 可配置
            return "url:`" + _url + "`";
        })
            .replace('</version/>', function () {
            // todo 可配置
            var version = url.match(/^\/v[\d]\//g)[0].replace(/[\\\/]/g, '');
            return "'" + version + "'";
        })
            .replace('</Centername/>', "'" + centerName + "'")
            .replace('</childrenMetHod/>', "'" + (renderMethod ? renderMethod(method) : method.toUpperCase()) + "'")
            .replace('</childrenName/>', getParamNameInBody(method, writeFnParameters))
            .replace('</QueryNames/>', getQueryNameList(writeFnParameters).join(','))
            .replace('</childrenParams/>', writeParaString)
            .replace('</childrenParaTypes/>', writeParaTypesString);
    };
    return OutputControllerInsert;
}());
exports.OutputControllerInsert = OutputControllerInsert;
var OutputController = /** @class */ (function (_super) {
    __extends(OutputController, _super);
    function OutputController(_a) {
        var writeFnDoc = _a.writeFnDoc, writeFnName = _a.writeFnName, writeFnBody = _a.writeFnBody, writeFnParameters = _a.writeFnParameters;
        var _this = _super.call(this) || this;
        _this.writeFnDoc = writeFnDoc || _this.writeFnDoc;
        _this.writeFnName = writeFnName || _this.writeFnName;
        _this.writeFnBody = writeFnBody || _this.writeFnBody;
        _this.writeFnParameters = writeFnParameters || _this.writeFnParameters;
        return _this;
    }
    return OutputController;
}(OutputControllerInsert));
exports.OutputController = OutputController;
/**
 * 找出要通过body传递的参数
 */
function getParamNameInBody(method, parameters) {
    if (method == 'get' || method === 'delete') {
        return '\{\}';
    }
    return (lodash_1.find(parameters, function (e) { return e.in === 'body'; }) || {}).name || '{}';
}
/**
 * 获取所有在查询传中的参数名称
 * @param parameters
 */
function getQueryNameList(parameters) {
    return lodash_1.chain(parameters)
        .filter(function (e) { return e.in === 'query'; })
        .map(function (e) { return e.name; })
        .value();
}
/**
 * 内置替换接口方法中的变量字符串
 * @param childFunTemplate
 * @param DescriptionOfFn
 * @param ParasOfDescription
 * @param functionName
 * @param url
 * @param method
 * @param sortedParams
 * @param ParasOfFn
 * @param ParaTypesOfFn
 */
// export function
// export function
