"use strict";
/**
 * @format
 * @Description: 输出接口文件
 * @Date:2019/8/2 19:16
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var fs_1 = __importDefault(require("fs"));
var axios_1 = __importDefault(require("axios"));
var path_1 = __importDefault(require("path"));
var Util_1 = __importDefault(require("./Util"));
var OutptController_1 = require("./OutptController");
var SwaggerToService = /** @class */ (function () {
    function SwaggerToService(_a, outputController) {
        var url = _a.url, parentFunTemplate = _a.parentFunTemplate, childFunTemplate = _a.childFunTemplate, excludeParamName = _a.excludeParamName, outputPath = _a.outputPath, center = _a.center, filterServices = _a.filterServices, renderMethod = _a.renderMethod;
        if (outputController === void 0) { outputController = {}; }
        this.url = '';
        this.outputPath = '';
        this.parentFunTemplate = '';
        this.childFunTemplate = '';
        this.excludeParamName = [];
        this.center = '';
        this.filterServices = [];
        this.url = url;
        this.parentFunTemplate = parentFunTemplate;
        this.childFunTemplate = childFunTemplate;
        this.excludeParamName = excludeParamName;
        this.outputPath = outputPath; //todo 校验路径有效性
        this.center = center;
        this.filterServices = filterServices;
        this.renderMethod = renderMethod;
        this.outputController = new OutptController_1.OutputController(outputController);
    }
    SwaggerToService.prototype.main = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, axios_1.default.get(this.url).then(function (result) {
                        if (result.status !== 200)
                            return;
                        Util_1.default.checkDirExist(_this.outputPath);
                        var formatPathData = _this.convertDataStruct(result.data);
                        lodash_1.forOwn(_this.listToMap(formatPathData), function (value, key) {
                            var _list = key.split('__');
                            if (_this.filterServices) {
                                _this.filterServices.includes(_list[0]) && _this.outputServiceFile(_list[0], _list[1], value);
                            }
                            else {
                                _this.outputServiceFile(_list[0], _list[1], value);
                            }
                        });
                        _this.outputInterfaceListFile(result.data.definitions);
                    })];
            });
        });
    };
    /**
     * 将SwaggerUI的数据格式转换为理想的数据格式
     * @param data
     */
    SwaggerToService.prototype.convertDataStruct = function (data) {
        var tagGroups = data.tags;
        var paths = data.paths;
        var result = [];
        //将Path转换为更加可描述的数据接口
        lodash_1.forOwn(paths, function (pathItem, url) {
            lodash_1.forOwn(pathItem, function (item, apiType) {
                var _tag = lodash_1.find(tagGroups, function (tagItem) { return tagItem.name === item.tags[0]; }) || {};
                // let _description = _tag.description.split(" ").splice(0)
                result.push({
                    tagName: _tag.name,
                    tagDescription: _tag.description.replace(/\s/g, '').replace(/Rest$/, 'Service'),
                    url: url.replace(/{/g, '${'),
                    type: apiType,
                    description: item.description,
                    summary: item.summary,
                    functionName: apiType + url.replace(/[{}]/g, '$').replace(/([^$\w])/g, '_'),
                    param: item.parameters
                });
            });
        });
        return result;
    };
    SwaggerToService.prototype.getAllInterface = function (definitionsObj) {
        return lodash_1.map(definitionsObj, function (dtoItem, dtoName) { return ({
            name: dtoName,
            keyList: lodash_1.map(dtoItem.properties, function (propItem, keyName) { return ({
                keyName: keyName,
                type: propItem.type,
                description: propItem.description
            }); })
        }); });
    };
    /**
     * 格式化输出请求方法
     * @param functionName
     * @param url
     * @param description
     * @param summary
     * @param method
     * @param parameters
     */
    SwaggerToService.prototype.formatApiFn = function (functionName, url, description, summary, method, parameters) {
        return this.outputController.replaceChildFn({
            writeFnDoc: this.outputController.writeFnDoc(summary, description, method, url),
            writeParasDoc: this.outputController.writeParasDoc(parameters),
            writeFnParameters: this.outputController.writeFnParameters(parameters),
            writeParaString: this.outputController.writeParaString(parameters),
            writeParaTypesString: this.outputController.writeParaTypesString(parameters),
            childFunTemplate: this.childFunTemplate,
            functionName: functionName,
            url: url,
            method: method,
            centerName: this.center,
            renderMethod: this.renderMethod
        });
    };
    SwaggerToService.prototype.convertDataType = function (type) {
        var result = 'string';
        switch (type) {
            case 'string':
                break;
            case 'array':
                result = 'any[]';
                break;
            case 'integer':
                result = 'number';
                break;
        }
        return result;
    };
    /**
     * 输出一个Interface文件
     * @param definitions
     */
    SwaggerToService.prototype.outputInterfaceListFile = function (definitions) {
        var _this = this;
        var interInfoList = this.getAllInterface(definitions);
        /*interface name 去重*/
        interInfoList = lodash_1.filter(interInfoList, function (item) { return item.name.indexOf('RestResponse') == -1; });
        interInfoList = lodash_1.filter(interInfoList, function (item) { return !/.*[\u4e00-\u9fa5]+.*/.test(item.name); });
        // 转换java数据类型为适合ts的数据类型
        var result = '';
        lodash_1.forEach(interInfoList, function (item) {
            result += "export interface " + item.name.split('«')[0] + " {\n" + lodash_1.reduce(item.keyList, function (preResult, _inter) {
                preResult += "\n    /** " + _inter.description + " */\n    " + _inter.keyName + ": " + _this.convertDataType(_inter.type);
                return preResult;
            }, '') + "\n}\n\n";
        });
        var DataStructureFileName = 'DataStructure' + this.center.replace(/^[a-z]/g, function (w) { return w.toUpperCase(); }) + '.ts';
        fs_1.default.writeFileSync(path_1.default.join(process.cwd(), this.outputPath, DataStructureFileName), result); //todo中心
        console.log('中心数据结构被写入，' + DataStructureFileName);
    };
    /**
     * 调用正则替换变量，并通过文件模块输出接口文件
     * @param fileName 文件名称
     * @param fileDescription 文件藐视
     * @param formatPathData
     */
    SwaggerToService.prototype.outputServiceFile = function (fileName, fileDescription, formatPathData) {
        var _this = this;
        var content = '';
        content += lodash_1.map(formatPathData, function (pathItem) {
            var url = pathItem.url, functionName = pathItem.functionName, description = pathItem.description, param = pathItem.param, type = pathItem.type;
            param = lodash_1.filter(param, function (item) { return _this.excludeParamName.indexOf(item.name) == -1; });
            return _this.formatApiFn(functionName, url, description, description, type, param);
        }).join('');
        var endContent = '';
        content = this.parentFunTemplate
            .replace('</childFunList/>', content)
            .replace(/<\/parentFunName\/>/g, fileName)
            .replace("</FileDescription/>", fileDescription);
        fs_1.default.writeFileSync(path_1.default.join(process.cwd(), this.outputPath, fileName + ".ts"), content + endContent);
    };
    /**
     * 根绝Tag信息对数据分组
     * @param formatPathData
     */
    SwaggerToService.prototype.listToMap = function (formatPathData) {
        var result = {};
        lodash_1.forEach(formatPathData, function (item) {
            result[item.tagDescription + '__' + item.tagName] = result[item.tagDescription + '__' + item.tagName] || [];
            result[item.tagDescription + '__' + item.tagName].push(item);
        });
        return result;
    };
    return SwaggerToService;
}());
exports.default = SwaggerToService;
