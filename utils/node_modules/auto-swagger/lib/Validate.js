"use strict";
/**
 * @format
 * @Description: 校验配置文件
 * @Autho: luckybo
 * @Date:2019/9/26 17:49
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = __importDefault(require("chalk"));
var fs_1 = __importDefault(require("fs"));
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["NoConfig"] = 1] = "NoConfig";
    ErrorType[ErrorType["NoUrl"] = 2] = "NoUrl";
    ErrorType[ErrorType["NoError"] = 3] = "NoError";
})(ErrorType || (ErrorType = {}));
function showInfo(errorType) {
    switch (errorType) {
        case ErrorType.NoConfig:
            console.log(chalk_1.default.yellow('没有找到配置文件swagger.config.js，推荐使用`auto-swagger init`命令初始化一个配置文件swagger.config.js'));
            break;
        case ErrorType.NoUrl:
            console.log(chalk_1.default.red('不存在swagger地址'));
            break;
        case ErrorType.NoError:
        default:
            console.log(chalk_1.default.green('配置文件正常，开始获取swagger文件...'));
            break;
    }
}
var BaseValidate = /** @class */ (function () {
    function BaseValidate() {
        this.errorType = ErrorType.NoError;
    }
    BaseValidate.prototype.main = function (configPath) {
        this.validateConfig(configPath);
        this.validateUrl(configPath);
        showInfo(this.errorType);
        return this.errorType == ErrorType.NoError;
    };
    return BaseValidate;
}());
// 功能点1： 校验url是否存在
var Validate = /** @class */ (function (_super) {
    __extends(Validate, _super);
    function Validate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Validate.prototype.validateConfig = function (configPath) {
        /** 查找配置文件 */
        if (!fs_1.default.existsSync(configPath)) {
            this.errorType = ErrorType.NoConfig;
        }
    };
    // 校验是否存在url
    Validate.prototype.validateUrl = function (configPath) {
        if (this.errorType !== ErrorType.NoError)
            return;
        var config = require(configPath);
        if (!config.url)
            this.errorType = ErrorType.NoUrl;
    };
    return Validate;
}(BaseValidate));
exports.default = Validate;
